#!/bin/bash
function help() {
  echo "Usage:"
  echo "  gh org-teams [-o|--ORG <ORG>] [-n|--NAME] [-u|--URL]"
  echo
  echo "By default the ORG is obtained using the command gh pwd."
  echo "  For a better experience set these alias:"
  echo "    set alias pwd to:  !gh config get current-org"
  echo "    set alias cd to:   !gh config set current-org "$1" 2>/dev/null"
  exit 1
}

POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
  case $1 in
  -o | --ORG)
    ORG=$2
    shift # past argument
    shift # past value
    ;;
  -n | --NAME)
    NAME=true
    shift # past value
    ;;
  -u | --URL)
    URL=true
    shift # past value
    ;;
 -nu | --NAME-URL)
    NAME=true
    URL=true
    shift # past value
    ;;


  -* | --*)
    help
    ;;
  *)
    POSITIONAL_ARGS+=("$1") # save positional arg
    shift # past argument
    ;;
  esac
done

if [ -z "$ORG" ]; then
  ORG=$(gh pwd) || help
fi
QUERY='query getInfo($organization: String!) {
  organization(login: $organization) {
    teams(first: 100) {
      totalCount
      edges {
        node {
          name
          members(first: 100) {
            totalCount
            edges {
              memberAccessUrl
              node {
                name
                url
                email
                login
                avatarUrl             
              }
            }
          }
          url
        }
      }
    }
  }
}'

TEAMS=$(gh api graphql -F organization="$ORG" -f query="$QUERY")

if [ -n "$NAME" ] && [ -n "$URL" ] 
then
  echo $TEAMS |  jq '.data.organization.teams.edges | map({ name:.node.name, url:.node.url})'
  exit 0
fi
if [ -n "$NAME" ]; then
  echo $TEAMS |  jq '.data.organization.teams.edges | map(.node.name)'
  exit 0
fi
if [ -n "$URL" ]; then
  echo $TEAMS |  jq '.data.organization.teams.edges | map(.node.url)'
  exit 0
fi

echo $TEAMS
